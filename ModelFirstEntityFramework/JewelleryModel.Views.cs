//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(ModelFirstEntityFramework.JewelleryModelContainer),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets56f927f9641b11bd07c742200381579cc5f818ccc2f218561809edd32e888ec3))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets56f927f9641b11bd07c742200381579cc5f818ccc2f218561809edd32e888ec3 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "56f927f9641b11bd07c742200381579cc5f818ccc2f218561809edd32e888ec3"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "JewelleryModelStoreContainer.Items")
            {
                return GetView0();
            }

            if (extentName == "JewelleryModelStoreContainer.Products")
            {
                return GetView1();
            }

            if (extentName == "JewelleryModelStoreContainer.LegalUnits")
            {
                return GetView2();
            }

            if (extentName == "JewelleryModelStoreContainer.ItemLocalisations")
            {
                return GetView3();
            }

            if (extentName == "JewelleryModelStoreContainer.ItemPrices")
            {
                return GetView4();
            }

            if (extentName == "JewelleryModelStoreContainer.PriceCodes")
            {
                return GetView5();
            }

            if (extentName == "JewelleryModelStoreContainer.Currencies")
            {
                return GetView6();
            }

            if (extentName == "JewelleryModelStoreContainer.Merchants")
            {
                return GetView7();
            }

            if (extentName == "JewelleryModelStoreContainer.Stores")
            {
                return GetView8();
            }

            if (extentName == "JewelleryModelStoreContainer.StoreItems")
            {
                return GetView9();
            }

            if (extentName == "JewelleryModelStoreContainer.ItemDescriptions")
            {
                return GetView10();
            }

            if (extentName == "JewelleryModelContainer.Items")
            {
                return GetView11();
            }

            if (extentName == "JewelleryModelContainer.Products")
            {
                return GetView12();
            }

            if (extentName == "JewelleryModelContainer.LegalUnits")
            {
                return GetView13();
            }

            if (extentName == "JewelleryModelContainer.ItemLocalisations")
            {
                return GetView14();
            }

            if (extentName == "JewelleryModelContainer.ItemPrices")
            {
                return GetView15();
            }

            if (extentName == "JewelleryModelContainer.PriceCodes")
            {
                return GetView16();
            }

            if (extentName == "JewelleryModelContainer.Currencies")
            {
                return GetView17();
            }

            if (extentName == "JewelleryModelContainer.Merchants")
            {
                return GetView18();
            }

            if (extentName == "JewelleryModelContainer.Stores")
            {
                return GetView19();
            }

            if (extentName == "JewelleryModelContainer.LegalUnitsStores")
            {
                return GetView20();
            }

            if (extentName == "JewelleryModelContainer.StoreItems")
            {
                return GetView21();
            }

            if (extentName == "JewelleryModelContainer.ItemDescriptions")
            {
                return GetView22();
            }

            if (extentName == "JewelleryModelContainer.ItemDescriptionsItems")
            {
                return GetView23();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.Items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Items
        [JewelleryModel.Store.Items](T1.Items_ItemId, T1.Items_ProductId, T1.Items_AXItemId, T1.Items_ItemSizeId, T1.Items_ItemTypeId, T1.Items_ItemBarcode, T1.Items_ItemModifiedBy, T1.Items_ItemModifiedDateTime, T1.Items_StoreItemsStoreItemId)
    FROM (
        SELECT 
            T.ItemId AS Items_ItemId, 
            T.ProductId AS Items_ProductId, 
            T.AXItemId AS Items_AXItemId, 
            T.ItemSizeId AS Items_ItemSizeId, 
            T.ItemTypeId AS Items_ItemTypeId, 
            T.ItemBarcode AS Items_ItemBarcode, 
            T.ItemModifiedBy AS Items_ItemModifiedBy, 
            T.ItemModifiedDateTime AS Items_ItemModifiedDateTime, 
            T.StoreItemsStoreItemId AS Items_StoreItemsStoreItemId, 
            True AS _from0
        FROM JewelleryModelContainer.Items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        [JewelleryModel.Store.Products](T1.Products_ProductId, T1.Products_LegalUnitId, T1.Products_ProductName, T1.Products_ProductNo, T1.Products_ProductTypeId, T1.Products_ProductModifiedBy, T1.Products_ProductModifiedDateTime)
    FROM (
        SELECT 
            T.ProductId AS Products_ProductId, 
            T.LegalUnitId AS Products_LegalUnitId, 
            T.ProductName AS Products_ProductName, 
            T.ProductNo AS Products_ProductNo, 
            T.ProductTypeId AS Products_ProductTypeId, 
            T.ProductModifiedBy AS Products_ProductModifiedBy, 
            T.ProductModifiedDateTime AS Products_ProductModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelContainer.Products AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.LegalUnits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LegalUnits
        [JewelleryModel.Store.LegalUnits](T1.LegalUnits_LegalUnitId, T1.LegalUnits_LegalUnitCode, T1.LegalUnits_LegalUnitName, T1.LegalUnits_LegalUnitModifiedBy, T1.LegalUnits_LegalUnitModifiedDateTime)
    FROM (
        SELECT 
            T.LegalUnitId AS LegalUnits_LegalUnitId, 
            T.LegalUnitCode AS LegalUnits_LegalUnitCode, 
            T.LegalUnitName AS LegalUnits_LegalUnitName, 
            T.LegalUnitModifiedBy AS LegalUnits_LegalUnitModifiedBy, 
            T.LegalUnitModifiedDateTime AS LegalUnits_LegalUnitModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelContainer.LegalUnits AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.ItemLocalisations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ItemLocalisations
        [JewelleryModel.Store.ItemLocalisations](T1.ItemLocalisations_ItemLocalisationId, T1.ItemLocalisations_ItemId, T1.ItemLocalisations_NameTranslated, T1.ItemLocalisations_LanguageCultureCode, T1.ItemLocalisations_LanguageName, T1.[ItemLocalisations.ISO639_2], T1.[ItemLocalisations.ISO639_3], T1.ItemLocalisations_ItemLocalisationModifiedBy, T1.ItemLocalisations_ItemLocalisationModifiedDateTime)
    FROM (
        SELECT 
            T.ItemLocalisationId AS ItemLocalisations_ItemLocalisationId, 
            T.ItemId AS ItemLocalisations_ItemId, 
            T.NameTranslated AS ItemLocalisations_NameTranslated, 
            T.LanguageCultureCode AS ItemLocalisations_LanguageCultureCode, 
            T.LanguageName AS ItemLocalisations_LanguageName, 
            T.ISO639_2 AS [ItemLocalisations.ISO639_2], 
            T.ISO639_3 AS [ItemLocalisations.ISO639_3], 
            T.ItemLocalisationModifiedBy AS ItemLocalisations_ItemLocalisationModifiedBy, 
            T.ItemLocalisationModifiedDateTime AS ItemLocalisations_ItemLocalisationModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelContainer.ItemLocalisations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.ItemPrices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ItemPrices
        [JewelleryModel.Store.ItemPrices](T1.ItemPrices_PriceId, T1.ItemPrices_ItemId, T1.ItemPrices_CurrencyId, T1.ItemPrices_PriceCodeId, T1.ItemPrices_ItemPrice)
    FROM (
        SELECT 
            T.PriceId AS ItemPrices_PriceId, 
            T.ItemId AS ItemPrices_ItemId, 
            T.CurrencyId AS ItemPrices_CurrencyId, 
            T.PriceCodeId AS ItemPrices_PriceCodeId, 
            T.ItemPrice AS ItemPrices_ItemPrice, 
            True AS _from0
        FROM JewelleryModelContainer.ItemPrices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.PriceCodes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PriceCodes
        [JewelleryModel.Store.PriceCodes](T1.PriceCodes_PriceCodeId, T1.PriceCodes_PriceCodeModifiedBy, T1.PriceCodes_PriceCodeModifiedDateTime)
    FROM (
        SELECT 
            T.PriceCodeId AS PriceCodes_PriceCodeId, 
            T.PriceCodeModifiedBy AS PriceCodes_PriceCodeModifiedBy, 
            T.PriceCodeModifiedDateTime AS PriceCodes_PriceCodeModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelContainer.PriceCodes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.Currencies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Currencies
        [JewelleryModel.Store.Currencies](T1.Currencies_CurrencyId, T1.Currencies_CurrencyModifiedBy, T1.Currencies_CurrencyModifiedDateTime)
    FROM (
        SELECT 
            T.CurrencyId AS Currencies_CurrencyId, 
            T.CurrencyModifiedBy AS Currencies_CurrencyModifiedBy, 
            T.CurrencyModifiedDateTime AS Currencies_CurrencyModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelContainer.Currencies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.Merchants.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Merchants
        [JewelleryModel.Store.Merchants](T1.Merchants_MerchantId, T1.Merchants_MerchantName, T1.Merchants_MerchantPhone, T1.Merchants_MerchantEmail, T1.Merchants_MerchantAddress, T1.Merchants_MerchantCity, T1.Merchants_MerchantPostCode, T1.Merchants_MerchantCountry, T1.Merchants_MerchantModifiedBy, T1.Merchants_MerchantModifiedDateTime)
    FROM (
        SELECT 
            T.MerchantId AS Merchants_MerchantId, 
            T.MerchantName AS Merchants_MerchantName, 
            T.MerchantPhone AS Merchants_MerchantPhone, 
            T.MerchantEmail AS Merchants_MerchantEmail, 
            T.MerchantAddress AS Merchants_MerchantAddress, 
            T.MerchantCity AS Merchants_MerchantCity, 
            T.MerchantPostCode AS Merchants_MerchantPostCode, 
            T.MerchantCountry AS Merchants_MerchantCountry, 
            T.MerchantModifiedBy AS Merchants_MerchantModifiedBy, 
            T.MerchantModifiedDateTime AS Merchants_MerchantModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelContainer.Merchants AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.Stores.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Stores
        [JewelleryModel.Store.Stores](T3.Stores_StoreId, T3.Stores_MerchantId, T3.Stores_StoreName, T3.Stores_StorePhone, T3.Stores_StoreEmail, T3.Stores_StoreAddress, T3.Stores_StoreCity, T3.Stores_StorePostCode, T3.Stores_PriceCodesPriceCodeId, T3.Stores_LegalUnitId, T3.Stores_StoreModifiedBy, T3.Stores_StoreModifiedDateTime, T3.[Stores.LegalUnit_LegalUnitId])
    FROM (
        SELECT T1.Stores_StoreId, T2.Stores_MerchantId, T2.Stores_StoreName, T2.Stores_StorePhone, T2.Stores_StoreEmail, T2.Stores_StoreAddress, T2.Stores_StoreCity, T2.Stores_StorePostCode, T2.Stores_PriceCodesPriceCodeId, T2.Stores_LegalUnitId, T2.Stores_StoreModifiedBy, T2.Stores_StoreModifiedDateTime, T1.[Stores.LegalUnit_LegalUnitId], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.Stores).StoreId AS Stores_StoreId, 
                Key(T.LegalUnits).LegalUnitId AS [Stores.LegalUnit_LegalUnitId], 
                True AS _from1
            FROM JewelleryModelContainer.LegalUnitsStores AS T) AS T1
            INNER JOIN (
            SELECT 
                T.StoreId AS Stores_StoreId, 
                T.MerchantId AS Stores_MerchantId, 
                T.StoreName AS Stores_StoreName, 
                T.StorePhone AS Stores_StorePhone, 
                T.StoreEmail AS Stores_StoreEmail, 
                T.StoreAddress AS Stores_StoreAddress, 
                T.StoreCity AS Stores_StoreCity, 
                T.StorePostCode AS Stores_StorePostCode, 
                T.PriceCodesPriceCodeId AS Stores_PriceCodesPriceCodeId, 
                T.LegalUnitId AS Stores_LegalUnitId, 
                T.StoreModifiedBy AS Stores_StoreModifiedBy, 
                T.StoreModifiedDateTime AS Stores_StoreModifiedDateTime, 
                True AS _from0
            FROM JewelleryModelContainer.Stores AS T) AS T2
            ON T1.Stores_StoreId = T2.Stores_StoreId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.StoreItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StoreItems
        [JewelleryModel.Store.StoreItems](T1.StoreItems_StoreItemId, T1.StoreItems_StoreId, T1.StoreItems_StoreIdModifiedBy, T1.StoreItems_StoreIdModifiedDateTime, T1.StoreItems_StoresStoreId)
    FROM (
        SELECT 
            T.StoreItemId AS StoreItems_StoreItemId, 
            T.StoreId AS StoreItems_StoreId, 
            T.StoreIdModifiedBy AS StoreItems_StoreIdModifiedBy, 
            T.StoreIdModifiedDateTime AS StoreItems_StoreIdModifiedDateTime, 
            T.StoresStoreId AS StoreItems_StoresStoreId, 
            True AS _from0
        FROM JewelleryModelContainer.StoreItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelStoreContainer.ItemDescriptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ItemDescriptions
        [JewelleryModel.Store.ItemDescriptions](T3.ItemDescriptions_ItemDescriptionId, T3.ItemDescriptions_ItemId, T3.ItemDescriptions_ItemName, T3.ItemDescriptions_ItemDescription, T3.ItemDescriptions_ItemColor, T3.ItemDescriptions_ItemMaterial, T3.ItemDescriptions_ItemTheme, T3.ItemDescriptions_ItemStone, T3.ItemDescriptions_ItemDescrModifiedBy, T3.ItemDescriptions_ItemDescModifiedDateTime, T3.ItemDescriptions_LocalisationId, T3.[ItemDescriptions.Item_ItemId])
    FROM (
        SELECT T1.ItemDescriptions_ItemDescriptionId, T2.ItemDescriptions_ItemId, T2.ItemDescriptions_ItemName, T2.ItemDescriptions_ItemDescription, T2.ItemDescriptions_ItemColor, T2.ItemDescriptions_ItemMaterial, T2.ItemDescriptions_ItemTheme, T2.ItemDescriptions_ItemStone, T2.ItemDescriptions_ItemDescrModifiedBy, T2.ItemDescriptions_ItemDescModifiedDateTime, T2.ItemDescriptions_LocalisationId, T1.[ItemDescriptions.Item_ItemId], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.ItemDescriptions).ItemDescriptionId AS ItemDescriptions_ItemDescriptionId, 
                Key(T.Items).ItemId AS [ItemDescriptions.Item_ItemId], 
                True AS _from1
            FROM JewelleryModelContainer.ItemDescriptionsItems AS T) AS T1
            INNER JOIN (
            SELECT 
                T.ItemDescriptionId AS ItemDescriptions_ItemDescriptionId, 
                T.ItemId AS ItemDescriptions_ItemId, 
                T.ItemName AS ItemDescriptions_ItemName, 
                T.ItemDescription AS ItemDescriptions_ItemDescription, 
                T.ItemColor AS ItemDescriptions_ItemColor, 
                T.ItemMaterial AS ItemDescriptions_ItemMaterial, 
                T.ItemTheme AS ItemDescriptions_ItemTheme, 
                T.ItemStone AS ItemDescriptions_ItemStone, 
                T.ItemDescrModifiedBy AS ItemDescriptions_ItemDescrModifiedBy, 
                T.ItemDescModifiedDateTime AS ItemDescriptions_ItemDescModifiedDateTime, 
                T.LocalisationId AS ItemDescriptions_LocalisationId, 
                True AS _from0
            FROM JewelleryModelContainer.ItemDescriptions AS T) AS T2
            ON T1.ItemDescriptions_ItemDescriptionId = T2.ItemDescriptions_ItemDescriptionId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.Items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Items
        [JewelleryModel.Items](T1.Items_ItemId, T1.Items_ProductId, T1.Items_AXItemId, T1.Items_ItemSizeId, T1.Items_ItemTypeId, T1.Items_ItemBarcode, T1.Items_ItemModifiedBy, T1.Items_ItemModifiedDateTime, T1.Items_StoreItemsStoreItemId)
    FROM (
        SELECT 
            T.ItemId AS Items_ItemId, 
            T.ProductId AS Items_ProductId, 
            T.AXItemId AS Items_AXItemId, 
            T.ItemSizeId AS Items_ItemSizeId, 
            T.ItemTypeId AS Items_ItemTypeId, 
            T.ItemBarcode AS Items_ItemBarcode, 
            T.ItemModifiedBy AS Items_ItemModifiedBy, 
            T.ItemModifiedDateTime AS Items_ItemModifiedDateTime, 
            T.StoreItemsStoreItemId AS Items_StoreItemsStoreItemId, 
            True AS _from0
        FROM JewelleryModelStoreContainer.Items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        [JewelleryModel.Products](T1.Products_ProductId, T1.Products_LegalUnitId, T1.Products_ProductName, T1.Products_ProductNo, T1.Products_ProductTypeId, T1.Products_ProductModifiedBy, T1.Products_ProductModifiedDateTime)
    FROM (
        SELECT 
            T.ProductId AS Products_ProductId, 
            T.LegalUnitId AS Products_LegalUnitId, 
            T.ProductName AS Products_ProductName, 
            T.ProductNo AS Products_ProductNo, 
            T.ProductTypeId AS Products_ProductTypeId, 
            T.ProductModifiedBy AS Products_ProductModifiedBy, 
            T.ProductModifiedDateTime AS Products_ProductModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelStoreContainer.Products AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.LegalUnits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LegalUnits
        [JewelleryModel.LegalUnits](T1.LegalUnits_LegalUnitId, T1.LegalUnits_LegalUnitCode, T1.LegalUnits_LegalUnitName, T1.LegalUnits_LegalUnitModifiedBy, T1.LegalUnits_LegalUnitModifiedDateTime)
    FROM (
        SELECT 
            T.LegalUnitId AS LegalUnits_LegalUnitId, 
            T.LegalUnitCode AS LegalUnits_LegalUnitCode, 
            T.LegalUnitName AS LegalUnits_LegalUnitName, 
            T.LegalUnitModifiedBy AS LegalUnits_LegalUnitModifiedBy, 
            T.LegalUnitModifiedDateTime AS LegalUnits_LegalUnitModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelStoreContainer.LegalUnits AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.ItemLocalisations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ItemLocalisations
        [JewelleryModel.ItemLocalisation](T1.ItemLocalisation_ItemLocalisationId, T1.ItemLocalisation_ItemId, T1.ItemLocalisation_NameTranslated, T1.ItemLocalisation_LanguageCultureCode, T1.ItemLocalisation_LanguageName, T1.[ItemLocalisation.ISO639_2], T1.[ItemLocalisation.ISO639_3], T1.ItemLocalisation_ItemLocalisationModifiedBy, T1.ItemLocalisation_ItemLocalisationModifiedDateTime)
    FROM (
        SELECT 
            T.ItemLocalisationId AS ItemLocalisation_ItemLocalisationId, 
            T.ItemId AS ItemLocalisation_ItemId, 
            T.NameTranslated AS ItemLocalisation_NameTranslated, 
            T.LanguageCultureCode AS ItemLocalisation_LanguageCultureCode, 
            T.LanguageName AS ItemLocalisation_LanguageName, 
            T.ISO639_2 AS [ItemLocalisation.ISO639_2], 
            T.ISO639_3 AS [ItemLocalisation.ISO639_3], 
            T.ItemLocalisationModifiedBy AS ItemLocalisation_ItemLocalisationModifiedBy, 
            T.ItemLocalisationModifiedDateTime AS ItemLocalisation_ItemLocalisationModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelStoreContainer.ItemLocalisations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.ItemPrices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ItemPrices
        [JewelleryModel.ItemPrices](T1.ItemPrices_PriceId, T1.ItemPrices_ItemId, T1.ItemPrices_CurrencyId, T1.ItemPrices_PriceCodeId, T1.ItemPrices_ItemPrice)
    FROM (
        SELECT 
            T.PriceId AS ItemPrices_PriceId, 
            T.ItemId AS ItemPrices_ItemId, 
            T.CurrencyId AS ItemPrices_CurrencyId, 
            T.PriceCodeId AS ItemPrices_PriceCodeId, 
            T.ItemPrice AS ItemPrices_ItemPrice, 
            True AS _from0
        FROM JewelleryModelStoreContainer.ItemPrices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.PriceCodes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PriceCodes
        [JewelleryModel.PriceCodes](T1.PriceCodes_PriceCodeId, T1.PriceCodes_PriceCodeModifiedBy, T1.PriceCodes_PriceCodeModifiedDateTime)
    FROM (
        SELECT 
            T.PriceCodeId AS PriceCodes_PriceCodeId, 
            T.PriceCodeModifiedBy AS PriceCodes_PriceCodeModifiedBy, 
            T.PriceCodeModifiedDateTime AS PriceCodes_PriceCodeModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelStoreContainer.PriceCodes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.Currencies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Currencies
        [JewelleryModel.Currencies](T1.Currencies_CurrencyId, T1.Currencies_CurrencyModifiedBy, T1.Currencies_CurrencyModifiedDateTime)
    FROM (
        SELECT 
            T.CurrencyId AS Currencies_CurrencyId, 
            T.CurrencyModifiedBy AS Currencies_CurrencyModifiedBy, 
            T.CurrencyModifiedDateTime AS Currencies_CurrencyModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelStoreContainer.Currencies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.Merchants.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Merchants
        [JewelleryModel.Merchants](T1.Merchants_MerchantId, T1.Merchants_MerchantName, T1.Merchants_MerchantPhone, T1.Merchants_MerchantEmail, T1.Merchants_MerchantAddress, T1.Merchants_MerchantCity, T1.Merchants_MerchantPostCode, T1.Merchants_MerchantCountry, T1.Merchants_MerchantModifiedBy, T1.Merchants_MerchantModifiedDateTime)
    FROM (
        SELECT 
            T.MerchantId AS Merchants_MerchantId, 
            T.MerchantName AS Merchants_MerchantName, 
            T.MerchantPhone AS Merchants_MerchantPhone, 
            T.MerchantEmail AS Merchants_MerchantEmail, 
            T.MerchantAddress AS Merchants_MerchantAddress, 
            T.MerchantCity AS Merchants_MerchantCity, 
            T.MerchantPostCode AS Merchants_MerchantPostCode, 
            T.MerchantCountry AS Merchants_MerchantCountry, 
            T.MerchantModifiedBy AS Merchants_MerchantModifiedBy, 
            T.MerchantModifiedDateTime AS Merchants_MerchantModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelStoreContainer.Merchants AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.Stores.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Stores
        [JewelleryModel.Stores](T1.Stores_StoreId, T1.Stores_MerchantId, T1.Stores_StoreName, T1.Stores_StorePhone, T1.Stores_StoreEmail, T1.Stores_StoreAddress, T1.Stores_StoreCity, T1.Stores_StorePostCode, T1.Stores_PriceCodesPriceCodeId, T1.Stores_LegalUnitId, T1.Stores_StoreModifiedBy, T1.Stores_StoreModifiedDateTime) WITH 
        RELATIONSHIP(CREATEREF(JewelleryModelContainer.LegalUnits, ROW(T1.LegalUnitsStores_LegalUnits_LegalUnitId),[JewelleryModel.LegalUnits]),[JewelleryModel.LegalUnitsStores],Stores,LegalUnits) 
    FROM (
        SELECT 
            T.StoreId AS Stores_StoreId, 
            T.MerchantId AS Stores_MerchantId, 
            T.StoreName AS Stores_StoreName, 
            T.StorePhone AS Stores_StorePhone, 
            T.StoreEmail AS Stores_StoreEmail, 
            T.StoreAddress AS Stores_StoreAddress, 
            T.StoreCity AS Stores_StoreCity, 
            T.StorePostCode AS Stores_StorePostCode, 
            T.PriceCodesPriceCodeId AS Stores_PriceCodesPriceCodeId, 
            T.LegalUnitId AS Stores_LegalUnitId, 
            T.StoreModifiedBy AS Stores_StoreModifiedBy, 
            T.StoreModifiedDateTime AS Stores_StoreModifiedDateTime, 
            True AS _from0, 
            T.LegalUnit_LegalUnitId AS LegalUnitsStores_LegalUnits_LegalUnitId
        FROM JewelleryModelStoreContainer.Stores AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.LegalUnitsStores.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LegalUnitsStores
        [JewelleryModel.LegalUnitsStores](T3.LegalUnitsStores_LegalUnits, T3.LegalUnitsStores_Stores)
    FROM (
        SELECT -- Constructing LegalUnits
            CreateRef(JewelleryModelContainer.LegalUnits, row(T2.LegalUnitsStores_LegalUnits_LegalUnitId), [JewelleryModel.LegalUnits]) AS LegalUnitsStores_LegalUnits, 
            T2.LegalUnitsStores_Stores
        FROM (
            SELECT -- Constructing Stores
                T1.LegalUnitsStores_LegalUnits_LegalUnitId, 
                CreateRef(JewelleryModelContainer.Stores, row(T1.LegalUnitsStores_Stores_StoreId), [JewelleryModel.Stores]) AS LegalUnitsStores_Stores
            FROM (
                SELECT 
                    T.LegalUnit_LegalUnitId AS LegalUnitsStores_LegalUnits_LegalUnitId, 
                    T.StoreId AS LegalUnitsStores_Stores_StoreId, 
                    True AS _from0
                FROM JewelleryModelStoreContainer.Stores AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.StoreItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StoreItems
        [JewelleryModel.StoreItems](T1.StoreItems_StoreItemId, T1.StoreItems_StoreId, T1.StoreItems_StoresStoreId, T1.StoreItems_StoreIdModifiedBy, T1.StoreItems_StoreIdModifiedDateTime)
    FROM (
        SELECT 
            T.StoreItemId AS StoreItems_StoreItemId, 
            T.StoreId AS StoreItems_StoreId, 
            T.StoresStoreId AS StoreItems_StoresStoreId, 
            T.StoreIdModifiedBy AS StoreItems_StoreIdModifiedBy, 
            T.StoreIdModifiedDateTime AS StoreItems_StoreIdModifiedDateTime, 
            True AS _from0
        FROM JewelleryModelStoreContainer.StoreItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.ItemDescriptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ItemDescriptions
        [JewelleryModel.ItemDescriptions](T1.ItemDescriptions_ItemDescriptionId, T1.ItemDescriptions_ItemId, T1.ItemDescriptions_ItemName, T1.ItemDescriptions_ItemDescription, T1.ItemDescriptions_ItemColor, T1.ItemDescriptions_ItemMaterial, T1.ItemDescriptions_ItemTheme, T1.ItemDescriptions_ItemStone, T1.ItemDescriptions_ItemDescrModifiedBy, T1.ItemDescriptions_ItemDescModifiedDateTime, T1.ItemDescriptions_LocalisationId) WITH 
        RELATIONSHIP(CREATEREF(JewelleryModelContainer.Items, ROW(T1.ItemDescriptionsItems_Items_ItemId),[JewelleryModel.Items]),[JewelleryModel.ItemDescriptionsItems],ItemDescriptions,Items) 
    FROM (
        SELECT 
            T.ItemDescriptionId AS ItemDescriptions_ItemDescriptionId, 
            T.ItemId AS ItemDescriptions_ItemId, 
            T.ItemName AS ItemDescriptions_ItemName, 
            T.ItemDescription AS ItemDescriptions_ItemDescription, 
            T.ItemColor AS ItemDescriptions_ItemColor, 
            T.ItemMaterial AS ItemDescriptions_ItemMaterial, 
            T.ItemTheme AS ItemDescriptions_ItemTheme, 
            T.ItemStone AS ItemDescriptions_ItemStone, 
            T.ItemDescrModifiedBy AS ItemDescriptions_ItemDescrModifiedBy, 
            T.ItemDescModifiedDateTime AS ItemDescriptions_ItemDescModifiedDateTime, 
            T.LocalisationId AS ItemDescriptions_LocalisationId, 
            True AS _from0, 
            T.Item_ItemId AS ItemDescriptionsItems_Items_ItemId
        FROM JewelleryModelStoreContainer.ItemDescriptions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for JewelleryModelContainer.ItemDescriptionsItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ItemDescriptionsItems
        [JewelleryModel.ItemDescriptionsItems](T3.ItemDescriptionsItems_ItemDescriptions, T3.ItemDescriptionsItems_Items)
    FROM (
        SELECT -- Constructing ItemDescriptions
            CreateRef(JewelleryModelContainer.ItemDescriptions, row(T2.ItemDescriptionsItems_ItemDescriptions_ItemDescriptionId), [JewelleryModel.ItemDescriptions]) AS ItemDescriptionsItems_ItemDescriptions, 
            T2.ItemDescriptionsItems_Items
        FROM (
            SELECT -- Constructing Items
                T1.ItemDescriptionsItems_ItemDescriptions_ItemDescriptionId, 
                CreateRef(JewelleryModelContainer.Items, row(T1.ItemDescriptionsItems_Items_ItemId), [JewelleryModel.Items]) AS ItemDescriptionsItems_Items
            FROM (
                SELECT 
                    T.ItemDescriptionId AS ItemDescriptionsItems_ItemDescriptions_ItemDescriptionId, 
                    T.Item_ItemId AS ItemDescriptionsItems_Items_ItemId, 
                    True AS _from0
                FROM JewelleryModelStoreContainer.ItemDescriptions AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
